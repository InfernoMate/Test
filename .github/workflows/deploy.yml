# Name des Workflows, der in der "Actions"-Übersicht angezeigt wird
name: Deploy Main and Testing Branches

# Trigger: Wann soll dieser Workflow starten?
on:
  push:
    branches:
      - main
      - Testing
  # Erlaubt manuelles Starten des Workflows über den "Actions"-Tab
  workflow_dispatch:

# Definiert die einzelnen Aufgaben (Jobs), die der Workflow ausführt
jobs:
  deploy:
    # Gibt dem Job einen Namen
    name: Deploy to GitHub Pages
    # Legt fest, auf welchem Betriebssystem der Job laufen soll
    runs-on: ubuntu-latest
    # Definiert die Berechtigungen, die der Workflow benötigt
    permissions:
      contents: read # Lesezugriff auf den Code
      pages: write    # Schreibzugriff, um auf GitHub Pages zu veröffentlichen
      id-token: write # Nötig für die Authentifizierung beim Deployment

    steps:
      # --- Schritt 1: Main-Branch auschecken ---
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main # explizit den main-branch angeben

      # --- HIER DEINE BUILD-SCHRITTE FÜR MAIN EINFÜGEN (falls nötig) ---
      # Beispiel: Wenn du Node.js verwendest, um deine Seite zu bauen
      # - name: Setup Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '18'
      # - name: Install dependencies
      #   run: npm install
      # - name: Build project
      #   run: npm run build
      # Stelle sicher, dass das Ergebnis im Hauptverzeichnis liegt

      # --- Schritt 2: Testing-Branch in einen Unterordner auschecken ---
      - name: Checkout testing branch into 'testing' subfolder
        uses: actions/checkout@v3
        with:
          ref: Testing # explizit den Testing-branch angeben
          path: ./testing # WICHTIG: Checkt den Code in den Ordner 'testing' aus

      # --- HIER DEINE BUILD-SCHRITTE FÜR TESTING EINFÜGEN (falls nötig) ---
      # Beispiel für den Testing-Branch
      # - name: Build testing branch
      #   run: |
      #     cd testing
      #     npm install
      #     npm run build
      # Stelle sicher, dass das Ergebnis im 'testing'-Ordner liegt

      # --- Schritt 3: Artefakt für GitHub Pages vorbereiten ---
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          # Lade den gesamten Ordner-Inhalt hoch
          # (beinhaltet jetzt den Code von 'main' und den 'testing'-Unterordner)
          path: '.'

      # --- Schritt 4: Artefakt auf GitHub Pages veröffentlichen ---
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
